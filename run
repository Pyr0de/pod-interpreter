#!/bin/bash

RED=';31'
GREEN=';32'
BLUE=';34'
NORMAL='0'
BOLD='1'

color() {
	if [[ $# -ge 1 ]];then
		echo "\033[$1$2m"
	else
		echo '\033[0m'
	fi
}

OUT_DIR="out"
OUT_BUILD="$OUT_DIR/build"
OUT_NAME="pod-interpreter"
OUT_BUILD_PATH="$OUT_BUILD/$OUT_NAME"

TEST_DIR="$OUT_DIR/test-tmp"
P_STDERR="$TEST_DIR/stderr"
P_STDOUT="$TEST_DIR/stdout"


exit_usage() {
	echo "Usage: $0 {argument} {file}"
	exit 1
}

clean_output() {
	mkdir -p $OUT_BUILD
	# checks that out_dir is set properly (or atleast i try)
	if [[ ! "$OUT_DIR/.." -ef $(pwd) ]]; then
		echo "invalid out_dir"
		exit 1
	fi
	rm --preserve-root -rf $OUT_DIR
	mkdir -p $OUT_BUILD
}

build() {
	go build -o $OUT_BUILD_PATH ./cmd/pod-interpreter
}

run-tests() {
	exit_code_to_temp_file() {
		exitcode_msg="ExitCode: $1"
		echo "$(echo "$exitcode_msg"; echo -n "$(<$2)")" >$2
	}
	echo "[ Running Tests ]"

	mkdir -p $TEST_DIR
	touch $P_STDERR
	touch $P_STDOUT

	COUNT=0
	PASS=0
	FAIL=0

	for i in $(find . -iregex "\.\/tests\/.*\.\(pod\|pd\)"); do
		if [[ $i =~ (\.\/tests\/([^\/]+)[^.]+) ]]; then
			run_type=${BASH_REMATCH[2]}
			test_path=${BASH_REMATCH[1]}

			./$OUT_BUILD_PATH $run_type $i >$P_STDOUT 2>$P_STDERR
			exit_code=$?

			exit_code_to_temp_file $exit_code $P_STDOUT
			exit_code_to_temp_file $exit_code $P_STDERR
				
			expect_stdout_file="$test_path.stdout"
			expect_stderr_file="$test_path.stderr"

			diff_out=$(diff $P_STDOUT $expect_stdout_file 2>/dev/null)
			diff_out_fail=$?
			
			diff_err=$(diff $P_STDERR $expect_stderr_file 2>/dev/null)
			diff_err_fail=$?

			if [[ $diff_err_fail -eq 0 ]] && [[ $diff_out_fail -eq 0 ]]; then
				((PASS++))
			elif [[ $BLESS ]]; then
				echo "$(<$P_STDOUT)" >$expect_stdout_file
				echo "$(<$P_STDERR)" >$expect_stderr_file
				echo -e "\n    > Saved output state of $(color $BOLD $BLUE)$i$(color)"
				((PASS++))
			else
				msg="\n   -> Failed: $(color $BOLD $RED)$i$(color) with error code $?"
				echo -e "$msg"

				if [[ $diff_out_fail -ne 0 ]]; then
					echo -e "=======$(color $GREEN)STDOUT$(color)=========="
					if [[ $diff_out_fail -eq 1 ]];then 
						echo "$diff_out"
					fi
				fi
				if [[ $diff_out_fail -eq 2 ]]; then
					echo "$(<$P_STDOUT)"
				fi

				if [[ $diff_err_fail -ne 0 ]]; then
					echo -e "=======$(color $RED)STDERR$(color)=========="
					if [[ $diff_err_fail -eq 1 ]];then 
						echo "$diff_err"
					fi
				fi
				if [[ $diff_err_fail -eq 2 ]]; then
					echo "$(<$P_STDERR)"
				fi

				if [[ $diff_err_fail -eq 2 ]] || [[ $diff_out_fail -eq 2 ]]; then
					echo -e "\nFile not found. Try '$0 test bless'"
				fi
				((FAIL++))
			fi
			((COUNT++))
		fi

	done

	echo -e "\n ===> $(color $GREEN)$PASS/$COUNT$(color) passed : $(color $RED)$FAIL/$COUNT$(color) failed"
	if [[ $FAIL -ne 0 ]]; then
		echo -e "$(color $RED)$FAIL test(s)$(color) failed"
		exit 1
	fi
	clean_output
}

if [[ ! $RUN_TYPE ]]; then
 	RUN_TYPE=run
fi

FILE=${@: -1}

for arg in "$@"; do
    if [[ $arg == "build" ]]; then
		BUILD=true
	elif [[ $arg == "wasm" ]]; then
		WASM=true
	elif [[ $arg == "test" ]]; then
		TEST=true
	elif [[ $arg == "bless" ]]; then
		BLESS=true
	fi
done

if [[ $# -lt 1 ]]; then
	exit_usage
fi

clean_output
if [[ $TEST ]]; then
	OUT_BUILD_PATH="$OUT_BUILD/$OUT_NAME"
	build
	run-tests
	if [[ ! $WASM ]] && [[ ! $BUILD ]]; then
		exit 0
	fi
fi

if [[ $WASM ]]; then
	GOOS=js
	GOARCH=wasm
	cp "$(go env GOROOT)/misc/wasm/wasm_exec.js" ./$OUT_BUILD
	cp ./web/* ./$OUT_BUILD/
	rm ./$OUT_BUILD/*.go

	cp -r ./examples ./$OUT_BUILD
	python3 ./examples/example-index.py
	rm ./$OUT_BUILD/examples/*.py

	OUT_BUILD_PATH="$OUT_BUILD/main.wasm"
	echo "[ Building for WASM ]"
else
	OUT_BUILD_PATH="$OUT_BUILD/$OUT_NAME"
	echo "[ Building for native ]"
fi
build

if [[ ! $BUILD ]] && [[ $WASM ]]; then
	go run web/main.go
elif [[ ! $BUILD ]] && [[ -f $FILE ]]; then
	OUT_MSG="[ Running $FILE ]"
	echo $OUT_MSG
	for i in $(seq ${#OUT_MSG}); do
		echo -n "-"
	done
	echo
	./$OUT_BUILD_PATH $RUN_TYPE $FILE
elif [[ ! $BUILD ]] && [[ ! $TEST ]]; then
	echo "Invalid file"
	exit_usage
fi
